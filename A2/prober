#! /usr/bin/perl -w
use Net::SNMP;
use Math::Round;
use Time::HiRes qw /gettimeofday nanosleep/;
use POSIX qw / fmod /;
use POSIX qw / ceil /;
no warnings qw(uninitialized);
my $count= 1; 
my $samp = 0; 
my $timeticks = 0;
my @list = (); 
my @oid = ();
my @agent = split /[:]/,$ARGV[0];
my ($ip,$port,$community) = @agent;
my $time_interval = 1/$ARGV[1];
my $samp_req = $ARGV[2];

push(@list,"1.3.6.1.2.1.1.3.0");

foreach $oid(3 .. $#ARGV)                       
{
	push(@list,$ARGV[$oid]);
	$oid{"$ARGV[$oid]"} = 0;
}
my $t = gettimeofday;


while () 
{
	$start = gettimeofday;
	
	($session, $error) = Net::SNMP->session(
					    -hostname => $ip,
					    -community=> $community,
					    -version=> "2c",
					    -port     => $port,
					    -translate=> [-timeticks => 0x0]	
					);
	if (!defined($session))
	{
		  printf "Error: %s.\n", $error;
		  exit;
	}

	$result = $session->get_request(
			  -varbindlist      => \@list,
       			);
	

	$types = $session->var_bind_types();
	if(!defined($result))
	{
		printf("Timeout: %s.\n", $session->error());
	}
	else
	{
		if (($result->{'1.3.6.1.2.1.1.3.0'}) < $timeticks)             
		{
			print "snmpd service restart found...\n";
			$count = 1; 
			$timeticks = 0;
		}
		$diff_timeticks = (($result->{'1.3.6.1.2.1.1.3.0'} - $timeticks)/100);
		$timeticks = $result->{'1.3.6.1.2.1.1.3.0'};
		push(@out, time);
		if ($diff_timeticks !=0)
		{
			$inter_sample_time = round($diff_timeticks);
			if ($ARGV[1]== 2){
				$inter_sample_time = $diff_timeticks;
			}
                       
			foreach $val (1 .. ($#list))
			{
				
				if (($types->{"$list[$val]"}) == 65)
				{
					$new = $result->{"$list[$val]"};
					if ($oid{"$list[$val]"} > $new)
					{
						$rate = sprintf("%0d",(((2**32) + ($new) - ($oid{"$list[$val]"}))/$inter_sample_time));
						push (@out, "| $rate");
						$oid{"$list[$val]"} = $new;
					}
					else 
					{
						$rate = sprintf("%0d",(($new - $oid{"$list[$val]"})/$inter_sample_time));
						push (@out, "| $rate");
						$oid{"$list[$val]"} = $new;
					}
				}
				
				if (($types->{"$list[$val]"}) == 70)
				{
					$new = $result->{"$list[$val]"};
					if ($oid{"$list[$val]"} > $new)
					{
						$rate = sprintf("%0d",(((2**64) + ($new) - ($oid{"$list[$val]"}))/$inter_sample_time));
						push (@out, "| $rate");
						$oid{"$list[$val]"} = $new;
					}
					else 
					{
						$rate = sprintf("%0d",(($new - $oid{"$list[$val]"})/$inter_sample_time));
						push (@out, "| $rate");
						$oid{"$list[$val]"} = $new;
					}
				}
			}
			if ($count > 1)
			{
				print "@out\n";
				$samp = $samp + 1;
			}
		}
		@out = ();
		$count = $count + 1;
		exit if ($samp == $samp_req);
		$end = gettimeofday;

		$execution = $end - $start;
                my $k = ceil (($end - $t)/$time_interval );
                
		if ($execution < $time_interval)
		{
			$actual_sleep = ($t+$k*$time_interval) - $end ;
			$nano = $actual_sleep * 1000000000;  
                         nanosleep($nano);
		}
                 else
		{
			
			$actual_sleep = ($t+($k+1)*$time_interval) - $end ;
			$nano = $actual_sleep * 1000000000;  
                         nanosleep($nano);

                 }

		$session->close();
		
	}

	
}

